import { NestFactory } from '@nestjs/core';
import { AppModule } from '../app.module';
import { PrismaService } from '../prisma/prisma.service';

async function testDatabaseConnection() {
  console.log('üîç ƒêang ki·ªÉm tra k·∫øt n·ªëi database v·ªõi Prisma...');

  try {
    const app = await NestFactory.createApplicationContext(AppModule);
    const prisma = app.get(PrismaService);

    // Test k·∫øt n·ªëi c∆° b·∫£n
    await prisma.$connect();
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!');

    // Test query ƒë∆°n gi·∫£n
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ Query test th√†nh c√¥ng:', result);

    // Test t·∫°o b·∫£ng users n·∫øu ch∆∞a c√≥ (PostgreSQL syntax)
    try {
      await prisma.$executeRaw`CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        "fullName" VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        phone VARCHAR(255),
        "createdAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      )`;
      console.log('‚úÖ B·∫£ng users ƒë√£ ƒë∆∞·ª£c t·∫°o/ki·ªÉm tra th√†nh c√¥ng');
    } catch (tableError) {
      console.log(
        '‚ÑπÔ∏è B·∫£ng users c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i ho·∫∑c c√≥ l·ªói:',
        tableError.message,
      );
    }

    await prisma.$disconnect();
    await app.close();
    console.log('üéâ Test k·∫øt n·ªëi ho√†n t·∫•t th√†nh c√¥ng!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi database:', error.message);
    console.error('üìù Chi ti·∫øt l·ªói:', error);
    process.exit(1);
  }
}

testDatabaseConnection();
